<Ui xmlns="http://www.blizzard.com/wow/ui/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.blizzard.com/wow/ui/
..\FrameXML\UI.xsd">

    <Button name="TomCats-DarkshoreRaresMiniMapButtonTemplate" virtual="true" frameStrata="MEDIUM" frameLevel="10" dontSavePosition="true">
        <Size x="32" y="32"/>
        <Anchors>
            <Anchor point="CENTER" relativeTo="Minimap" relativePoint="CENTER" x="-78.674" y="-18.193" />
        </Anchors>
        <Layers>
            <Layer level="BACKGROUND">
                <Texture name="$parentBackground" file="Interface\Minimap\UI-Minimap-Background">
                    <Size x="25" y="25"/>
                    <Anchors>
                        <Anchor point="TOPLEFT">
                            <Offset x="3" y="-3"/>
                        </Anchor>
                    </Anchors>
                    <Color r="1" g="1" b="1" a="0.6" />
                </Texture>
            </Layer>
            <Layer textureSubLevel="2">
                <Texture name="$parentIcon" file="Interface\Minimap\Tracking\None">
                    <Size x="20" y="20"/>
                    <Anchors>
                        <Anchor point="TOPLEFT">
                            <Offset x="6" y="-6"/>
                        </Anchor>
                    </Anchors>
                </Texture>
            </Layer>
            <Layer level="OVERLAY" textureSubLevel="4">
                <Texture name="$parentBorder" file="Interface\Minimap\MiniMap-TrackingBorder">
                    <Size x="54" y="54"/>
                    <Anchors>
                        <Anchor point="TOPLEFT"/>
                    </Anchors>
                </Texture>
            </Layer>
            <Layer level="OVERLAY" textureSubLevel="3">
                <Texture name="$parentIconOverlay" hidden="true">
                    <Anchors>
                        <Anchor point="TOPLEFT" relativeTo="$parentIcon"/>
                        <Anchor point="BOTTOMRIGHT" relativeTo="$parentIcon"/>
                    </Anchors>
                    <Color r="0.0" g="0.0" b="0.0" a="0.5"/>
                </Texture>
            </Layer>
        </Layers>
        <Scripts>
            <OnLoad>
                    self:RegisterForDrag("LeftButton")
                    local name = self:GetName()
                    local isDragging = false
                    local tooltipIsShowing = false
                    local Ax, Ay, scale, top, right
                    local r = 80
                    local preferences = {}
                    local handlers = {}
                    local shape = GetMinimapShape and GetMinimapShape() or "ROUND"

                    local function RefreshMeasurements()
                        Ax, Ay = Minimap:GetCenter()
                        scale = self:GetEffectiveScale()
                        right = UIParent:GetRight()
                        top = UIParent:GetTop()
                    end

                    local function ButtonDown()
                        _G[name .. "Icon"]:SetPoint("TOPLEFT", self, "TOPLEFT", 8, -8);
                        _G[name .. "IconOverlay"]:Show();
                    end

                    local function ButtonUp()
                        _G[name .. "Icon"]:SetPoint("TOPLEFT", self, "TOPLEFT", 6, -6);
                        _G[name .. "IconOverlay"]:Hide();
                    end

                    local function OnMouseDown()
                        ButtonDown()
                    end

                    local function OnMouseUp()
                        ButtonUp()
                    end

                    local function OnClick()
                        if (handlers.OnClick) then
                            handlers.OnClick()
                        end
                    end

                    local function UpdatePosition()
                        local rad = preferences.position
                        if (GetMinimapShape and GetMinimapShape() == "SQUARE") then
                            local x, y = math.cos(rad), math.sin(rad)
                            local h = 113.14
                            x = math.max(-80, math.min(x * h, 80))
                            y = math.max(-80, math.min(y * h, 80))
                            self:SetPoint("CENTER", Minimap, "CENTER", x, y)
                        else
                            local Cx = r * math.cos(rad)
                            local Cy = r * math.sin(rad)
                            self:SetPoint("CENTER", Minimap, "CENTER", Cx, Cy)
                        end
                        local buttonRight = self:GetRight()
                        if (buttonRight > right) then
                            local point = { self:GetPoint() }
                            local adj = (buttonRight - right) * scale
                            point[4] = point[4] - adj
                            self:SetPoint(unpack(point))
                        end
                        local buttonTop = self:GetTop()
                        if (buttonTop > top) then
                            local point = { self:GetPoint() }
                            local adj = (buttonTop - top) * scale
                            point[5] = point[5] - adj
                            self:SetPoint(unpack(point))
                        end
                    end

                    local function UpdatePositionByCursor()
                        local Bx, By = GetCursorPosition()
                        preferences.position = math.atan2((By / scale) - Ay, (Bx / scale) - Ax)
                        UpdatePosition()
                    end

                    local function OnUpdate()
                        if (isDragging) then
                            UpdatePositionByCursor()
                        else
                            local newShape = GetMinimapShape and GetMinimapShape() or "ROUND"
                            if (shape ~= newShape) then
                                shape = newShape
                                UpdatePosition()
                            end
                        end
                    end

                    local function OnDragStart()
                        if (tooltipIsShowing) then
                            self.tooltip:Hide()
                            tooltipIsShowing = false
                        end
                        RefreshMeasurements()
                        self:ClearAllPoints()
                        isDragging = true
                    end

                    local function OnDragStop()
                        ButtonUp()
                        isDragging = false
                    end

                    local function OnEnter()
                        if (self.tooltip and (not isDragging)) then
                            self.tooltip.Show(self)
                            tooltipIsShowing = true
                        end
                    end

                    local function OnLeave()
                        if (self.tooltip) then
                            self.tooltip.Hide()
                            tooltipIsShowing = false
                        end
                    end

                    function self:GetPreferences()
                        if (not preferences.position) then
                            local _, _, _, Bx, By = self:GetPoint()
                            local Ax, Ay = Minimap:GetCenter()
                            preferences.position = math.atan2(By - Ay, Bx - Ax)
                        end
                        return preferences
                    end

                    function self:SetPreferences(savedPreferences)
                        if (savedPreferences) then
                            if (savedPreferences.position and type(savedPreferences.position) == "number") then
                                preferences = savedPreferences
                            end
                            RefreshMeasurements()
                            UpdatePosition()
                            if (savedPreferences.hidden) then
                                self:Hide()
                            end
                        end
                    end

                    function self:SetEnabled(enabled)
                        if (enabled) then
                            self:Show()
                            preferences.hidden = false
                        else
                            self:Hide()
                            preferences.hidden = true
                        end
                    end

                    function self:SetHandler(handlerType, handler)
                        handlers[handlerType] = handler
                    end

                    self:SetScript("OnMouseDown", OnMouseDown)
                    self:SetScript("OnMouseUp", OnMouseUp)
                    self:SetScript("OnClick", OnClick)
                    self:SetScript("OnDragStart", OnDragStart)
                    self:SetScript("OnDragStop", OnDragStop)
                    self:SetScript("OnUpdate", OnUpdate)
                    self:SetScript("OnEnter", OnEnter)
                    self:SetScript("OnLeave", OnLeave)
            </OnLoad>
        </Scripts>
        <HighlightTexture alphaMode="ADD" file="Interface\Minimap\UI-Minimap-ZoomButton-Highlight"/>
    </Button>
    <Script file="Charms.lua" />
</Ui>
